!pip install mesa

!pip install websockets

from mesa import Agent, Model
from mesa.space import MultiGrid
from mesa.time import RandomActivation
from mesa.datacollection import DataCollector
from matplotlib.colors import ListedColormap

import matplotlib
import matplotlib.pyplot as plt
import matplotlib.animation as animation

plt.rcParams["animation.html"] = 'jshtml'
matplotlib.rcParams['animation.embed_limit'] = 2**128

import numpy as np
import pandas as pd
import time
import datetime
import random

import tracemalloc
import asyncio
import websockets
import json
from copy import deepcopy

def get_grid(model):
    grid = np.full((model.grid.width, model.grid.height), 1)  # Set the entire grid to green initially

    # Color the border cells with light gray
    grid[0, :] = 0  # Top border
    grid[-1, :] = 0  # Bottom border
    grid[:, 0] = 0  # Left border
    grid[:, -1] = 0  # Right border

    for cell in model.grid.coord_iter():
        cell_content, cell_pos = cell
        if cell_content:
            agent = cell_content[0]
            if hasattr(agent, 'maiz'):
                grid[cell_pos[0], cell_pos[1]] = 2  # Color the maiz cells
            elif hasattr(agent, 'tractor'):
                grid[cell_pos[0], cell_pos[1]] = 3  # Color the tractor cells
            elif hasattr(agent, 'obstacle'):
                grid[cell_pos[0], cell_pos[1]] = 4  # Color the obstacle cells

    return grid


class ObstacleAgent(Agent):
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)
        self.obstacle = 5
    def step(self):
        pass

class MaizAgent(Agent):
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)
        self.maiz = 1

    def step(self):
        pass


class TractorAgent(Agent):
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)
        self.next_step = None
        self.tractor = 2
        self.number_of_steps = 0

    def move(self):
        neighbors = self.model.grid.get_neighborhood(
            self.pos,
            moore=True,
            include_center=False
        )

        # Filter out border cells and obstacle position from the available positions
        neighbors = [pos for pos in neighbors if
                     0 < pos[0] < self.model.grid.width - 1 and 0 < pos[1] < self.model.grid.height - 1
                     and pos != (5, 3)]

        open_positions = [pos for pos in neighbors if not
                          any(isinstance(agent, (TractorAgent, ObstacleAgent))
                              for agent in self.model.grid.get_cell_list_contents(pos))]

        if open_positions:
            self.next_step = open_positions[np.random.randint(len(open_positions))]
            self.model.grid.move_agent(self, self.next_step)
            self.number_of_steps += 1

    def harvest(self):
        cellmates = self.model.grid.get_cell_list_contents([self.pos])
        for agent in cellmates:
            if isinstance(agent, MaizAgent):
                agent.maiz = 0
                self.model.grid.remove_agent(agent)

    def step(self):
        self.move()
        self.harvest()

class HarvestModel(Model):
    def __init__(self, T, M, O, width, height):
        self.num_tractors = T
        self.num_maiz = M
        self.num_obstacles = O  # Added number of obstacles
        self.setup_model(width, height)

    def setup_model(self, width, height):
        # Clear the scheduler and reset the grid
        self.schedule = RandomActivation(self)
        self.grid = MultiGrid(width + 2, height + 2, False)

        maiz_coordinates = [(i + 1, j + 1) for i in range(width) for j in range(height)]

        # Place maiz agents excluding positions where obstacles are located
        obstacle_positions = random.sample(maiz_coordinates, self.num_obstacles)
        maiz_coordinates = [coord for coord in maiz_coordinates if coord not in obstacle_positions]

        for i, coords in enumerate(maiz_coordinates):
            m = MaizAgent(i, self)
            self.schedule.add(m)
            self.grid.place_agent(m, coords)

        # Place obstacles around the grid
        for i, pos in enumerate(obstacle_positions):
            o = ObstacleAgent(i + self.num_maiz, self)
            self.schedule.add(o)
            self.grid.place_agent(o, pos)

        start = self.num_maiz + 1 + self.num_obstacles
        finish = self.num_tractors + start

        for i in range(start, finish):
            if i % 2 == 0:
                t = TractorAgent(i, self)
                self.schedule.add(t)
                self.grid.place_agent(t, (0, 0))
            else:
                t = TractorAgent(i, self)
                self.schedule.add(t)
                self.grid.place_agent(t, (width + 1, height + 1))

        self.datacollector = DataCollector(model_reporters={'Grid': get_grid})

    def maiz_counter(self):
        maiz_left = 0
        for cell in self.grid.coord_iter():
            cell_content, cell_pos = cell
            if len(cell_content) != 0:
                if hasattr(cell_content[0], 'maiz'):
                    agent = cell_content[0]
                    if agent.maiz == 1:
                        maiz_left += 1
        return maiz_left

    def step(self):
        self.datacollector.collect(self)
        self.schedule.step()
        self.maiz_left_total = self.maiz_counter()

    async def ws_handler(self, websocket, path):
        await self.ws_handler_inner(websocket)
      
    async def ws_handler_inner(self, websocket):
        print("\n **************\nSIMULACION**************\n")
        try: 
          self.reset()
          done = False
          directions = ['up', 'down', 'left', 'right']

          while not done:
            for tractor in self.tractor:
              state = (
                  tractor.pos[1] * self.p.dimensions_campo + tractor.pos[0]
              )
              action = self.egreedy_policy(state,0.0)

              reward = 0
              while reward == 0:
                reward, done = self.tractor.move(directions[action])[0]
              print(directions[action])

            self.tractor.harvest()
            self.tractor.move()
            await self.send_position(websocket)
            await asyncio.sleep(0.1)
        except websockets.exceptions.ConnectionClosed:
          pass

    async def send_positions(self, websocket):
        positions_tractors = {
            f"Tractor_{str(agent)}": [
                float(agent.pos[0]),
                float(agent.pos[1]),
                float(agent.previous_rotation),
                float(agent.capacity)
            ]
            for agent in self.tractor
        }

        positions_tractors = {
            f"Tractor_{str(agent)}":[
                float(agent.pos[0]),
                float(agent.pos[1]),
                float(-1),
            ]
            for agent in self.tractor
        }

        data = {
            **positions_cosechadoras,
            **position_tractors,
        }
        await websocket.send(json.dumps(data))

    async def run_simulation_with_websocket(self):
        loop = asyncio.get_running_loop()
        tracemalloc.start()
        server = await websockets.serve(
            lambda ws, path: self.ws_handler(ws, path),
            "127.0.0.1",  # Use the loopback address
            8765,
        )


        try:
          for _ in range(self.p.steps):
            self.step()
            await asyncio.sleep(0.1)
        finally: 
          server.close()
          await server.wait_closed()


GRID_SIZE = 10
num_tractors = 2
num_obstacles = 10
num_maiz = 100 - num_obstacles
num_generations = 100
num_steps = 0

start_time = time.time()
model = HarvestModel(num_tractors, num_maiz, num_obstacles, GRID_SIZE, GRID_SIZE)
for i in range(num_generations):
  model.step()
  if (i == (num_generations - 1)):
    for cell in model.grid.coord_iter():
      cell_content, cell_pos = cell
      if len(cell_content) != 0:
        if hasattr(cell_content[0], 'quantity_of_steps'):
          agent = cell_content[0]
          num_steps += agent.quantity_of_steps

print(f"total number of steps: {num_steps - num_tractors}")
print(f"Execution time: ", str(datetime.timedelta(seconds = (time.time() - start_time))))


all_grid = model.datacollector.get_model_vars_dataframe()
final_maiz_left = model.maiz_left_total

print(f"total maiz left: {final_maiz_left}")


fig, axis = plt.subplots(figsize=(5, 5))
axis.set_xticks([])
axis.set_yticks([])

colors = [
    (0.8, 0.8, 0.8),# Azul (color del agente Tractor)
    (1, 1, 1),   # Green (empty cell inside the border)  
    (0, 1, 0),   # Rojo (color del agente Maiz)
    
    (0, 0.6, 0), # Light gray (color for border cells)
    
    (0, 0, 0),   # Negro (color del agente Obstacle)
]

cmap_custom = ListedColormap(colors)
patch = axis.imshow(all_grid.iloc[0].iloc[0], cmap=cmap_custom)
plt.show()
prev_lines = []

# Create the initial contour lines for the full grid
for x in range(GRID_SIZE ):
    h_line, = axis.plot([x - 0.5, x - 0.5], [-0.5, GRID_SIZE + 0.5], color='gray', linestyle="-", linewidth=0.5)
    prev_lines.append(h_line)

for y in range(GRID_SIZE):
    v_line, = axis.plot([-0.5, GRID_SIZE + 0.5], [y - 0.5, y - 0.5], color='gray', linestyle="-", linewidth=0.5)
    prev_lines.append(v_line)


def animate(i):
    global prev_lines
    for line in prev_lines:
        line.remove()

    patch.set_data(all_grid.iloc[i].iloc[0])

    anim_lines = []

    # Update the contour lines for the full grid
    for x in range(GRID_SIZE + 3):
        h_line, = axis.plot([x - 0.5, x - 0.5], [-0.5, GRID_SIZE + 0.5], color='gray', linestyle="-", linewidth=0.5)
        anim_lines.append(h_line)

    for y in range(GRID_SIZE + 3):
        v_line, = axis.plot([-0.5, GRID_SIZE + 0.5], [y - 0.5, y - 0.5], color='gray', linestyle="-", linewidth=0.5)
        anim_lines.append(v_line)

    prev_lines = anim_lines

anim = animation.FuncAnimation(fig, animate, frames=num_generations)
anim

model_2 = HarvestModel(num_tractors, num_maiz, num_obstacles, GRID_SIZE, GRID_SIZE)
model_2.setup_model(GRID_SIZE, GRID_SIZE)

# Create an event loop
loop = asyncio.get_event_loop()

# Run the asynchronous function
await model_2.run_simulation_with_websocket()

